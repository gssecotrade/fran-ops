name: Fran Ops — Scheduler

on:
  schedule:
    # 08:00 UTC todos los días
    - cron: "0 8 * * *"
  workflow_dispatch: {}

jobs:
  run_ops:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps (ligero)
        run: |
          python -m pip install --upgrade pip
          # Si existe requirements en ops/scripts lo usamos; si no, instalamos base
          if [ -f ops/scripts/requirements.txt ]; then
            pip install -r ops/scripts/requirements.txt
          else
            pip install pandas google-api-python-client google-auth google-auth-httplib2 \
                       google-auth-oauthlib yagmail
          fi

      # --- EXTRACCIÓN ---
      - name: Sheets -> CSV
        env:
          GOOGLE_SA_JSON: ${{ secrets.GOOGLE_SA_JSON }}
        run: |
          python ops/scripts/sheets_to_csv.py || true

      # --- NORMALIZACIÓN ---
      - name: Normalize Loterías
        run: |
          python ops/scripts/normalize_loterias.py

      # --- DATA QUALITY (no bloquea si hay WARN) ---
      - name: Data Quality
        continue-on-error: true
        run: |
          python ops/scripts/dq_loterias.py

      # --- EMPAQUETADO ---
      - name: ZIP artefacts
        run: |
          bash ops/scripts/zip_all.sh

      # --- DRIVE UPLOAD + AUTOLIMPIEZA ---
      - name: Upload to Google Drive (with cleanup)
        env:
          GOOGLE_SA_JSON: ${{ secrets.GOOGLE_SA_JSON }}
          GDRIVE_FOLDER_ID: ${{ secrets.GDRIVE_FOLDER_ID }}
          # opcional: número de días para autolimpieza (por defecto 30 si no se define)
          GDRIVE_CLEANUP_DAYS: ${{ vars.GDRIVE_CLEANUP_DAYS }}
        run: |
          python ops/scripts/upload_to_gdrive.py

      # --- EMAIL RESUMEN (no bloquea si faltan credenciales) ---
      - name: Send summary email
        if: ${{ always() }}
        continue-on-error: true
        env:
          SMTP_USER: ${{ secrets.SMTP_USER }}
          SMTP_PASS: ${{ secrets.SMTP_PASS }}
          SMTP_TO:   ${{ secrets.SMTP_TO }}
        run: |
          python ops/scripts/send_summary_email.py

      # --- REPORTE PARA GH PAGES (HTML + JSON) ---
      - name: Build report.json + docs/index.html
        run: |
          python ops/scripts/make_report.py
          # Garantizamos que exista dist/report.json para el siguiente paso
          if [ ! -f dist/report.json ]; then
            echo '{
              "ts_utc":"'"$(date -u +%Y-%m-%dT%H:%M:%SZ)"'",
              "status":{"OK":0,"WARN":0,"FAIL":1,"WARN_LIST":[]},
              "manifest":"—","master_csv":false,"zips":[],"drive_links":[]
            }' > dist/report.json
          fi
          # Copiamos index.html generado (make_report ya lo deja en docs/)
          test -f docs/index.html

      # --- ACTUALIZA HOJA DE CONTROL ---
      - name: Update control sheet
        if: ${{ always() }}     # lo ejecutamos incluso si hubo WARN en pasos previos
        env:
          GOOGLE_SA_JSON:   ${{ secrets.GOOGLE_SA_JSON }}
          CONTROL_SHEET_ID: ${{ secrets.CONTROL_SHEET_ID || vars.CONTROL_SHEET_ID }}
          DIST_DIR: dist
        run: |
          python ops/scripts/update_control_sheet.py
