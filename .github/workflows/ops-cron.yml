name: Fran Ops — Scheduler

on:
  workflow_dispatch:
  schedule:
    # 08:00 Europe/Madrid aprox (07:00 UTC invierno / 06:00 UTC verano)
    - cron: '0 7 * * *'

permissions:
  contents: read
  pages: write
  id-token: write

env:
  DIST_DIR: dist

jobs:
  run_pipeline:
    name: Run Fran Ops pipeline
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install deps (ligero)
        run: |
          python -m pip install --upgrade pip
          pip install -r ops/scripts/requirements.txt || true
          pip install pandas gspread google-auth google-auth-oauthlib google-api-python-client

      # --- NUEVO: decodifica el SA Base64 y exporta GOOGLE_SA_JSON ---
      - name: Prepare Google SA
        env:
          GOOGLE_SA_JSON_BASE64: ${{ secrets.GOOGLE_SA_JSON_BASE64 }}
        run: |
          echo "$GOOGLE_SA_JSON_BASE64" | base64 -d > sa.json
          echo "GOOGLE_SA_JSON=$PWD/sa.json" >> $GITHUB_ENV
          echo "SA listo en $PWD/sa.json"

      # ---------- Extract: Sheets -> CSV ----------
      - name: Sheets -> CSV (Loterías)
        env:
          # ID de la Hoja de Google con todos los tabs (la misma que usas para Control_Pipeline)
          SHEETS_SPREADSHEET_ID: ${{ secrets.CONTROL_SHEET_ID }}
          # OAuth (si lo usan otros scripts)
          GDRIVE_OAUTH_CLIENT_ID:     ${{ secrets.GDRIVE_OAUTH_CLIENT_ID }}
          GDRIVE_OAUTH_CLIENT_SECRET: ${{ secrets.GDRIVE_OAUTH_CLIENT_SECRET }}
          GDRIVE_OAUTH_REFRESH_TOKEN: ${{ secrets.GDRIVE_OAUTH_REFRESH_TOKEN }}
          # GOOGLE_SA_JSON ya quedó exportado por "Prepare Google SA"
        run: |
          python ops/scripts/sheets_to_csv.py

      # ---------- Normalize ----------
      - name: Normalize
        run: |
          python ops/scripts/normalize_loterias.py

      # ---------- Data Quality ----------
      - name: Data Quality
        run: |
          python ops/scripts/dq_loterias.py

      # ---------- ZIP all ----------
      - name: ZIP all
        run: |
          bash ops/scripts/zip_all.sh

      # ---------- Upload to Drive ----------
      - name: Upload zips to Google Drive
        env:
          GDRIVE_FOLDER_ID:           ${{ secrets.GDRIVE_FOLDER_ID }}
          GDRIVE_OAUTH_CLIENT_ID:     ${{ secrets.GDRIVE_OAUTH_CLIENT_ID }}
          GDRIVE_OAUTH_CLIENT_SECRET: ${{ secrets.GDRIVE_OAUTH_CLIENT_SECRET }}
          GDRIVE_OAUTH_REFRESH_TOKEN: ${{ secrets.GDRIVE_OAUTH_REFRESH_TOKEN }}
        run: |
          python ops/scripts/upload_to_gdrive.py

      # ---------- Build report.json + docs/index.html ----------
      - name: Build report.json + docs/index.html
        run: |
          python ops/scripts/make_report.py

      # ---------- Publicar panel en GitHub Pages ----------
      - name: Configure Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact for Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs

  deploy:
    name: Deploy DQ Panel (GitHub Pages)
    needs: [run_pipeline]
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to Pages
        id: deployment
        uses: actions/deploy-pages@v4

  lae_scrape:
    name: Actualiza históricos (LAE -> Google Sheet)
    needs: [run_pipeline]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps (gspread + Playwright)
        run: |
          python -m pip install --upgrade pip
          pip install gspread google-auth playwright
          python -m playwright install --with-deps chromium

      - name: Prepare Google SA (for updater)
        env:
          GOOGLE_SA_JSON_BASE64: ${{ secrets.GOOGLE_SA_JSON_BASE64 }}
        run: |
          echo "$GOOGLE_SA_JSON_BASE64" | base64 -d > sa.json
          echo "GOOGLE_SA_JSON=$PWD/sa.json" >> $GITHUB_ENV

      - name: Scrape LAE results -> Google Sheet
        env:
          CONTROL_SHEET_ID:       ${{ secrets.CONTROL_SHEET_ID }}
          GOOGLE_SA_JSON_BASE64:  ${{ secrets.GOOGLE_SA_JSON_BASE64 }}
        run: |
          python ops/scripts/fetch_lae_results.py
